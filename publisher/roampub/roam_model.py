"""
Model of the elements that appear in PageDump generated JSON files -- the output of PageDump.js
 
Types:

    UID

Enums:

    VertexType
    MediaType

Classes:

    RoamVertex
    PageNode

Functions:

"""

from typing import TypeAlias, Any, Optional
from abc import ABC, abstractmethod
from enum import StrEnum
import logging

from common.types import Url
from common.introspect import get_property_values

UID: TypeAlias = str

class VertexType(StrEnum):
    ROAM_PAGE = 'roam/page', True
    ROAM_BLOCK_CONTENT = 'roam/block-content', True
    ROAM_BLOCK_HEADING = 'roam/block-heading', True
    ROAM_FILE = 'roam/file', False
   
    def __new__(cls: Any, value: str, is_roam_node: bool):
        obj = str.__new__(cls)
        obj._value_ = value
        obj.is_roam_node = is_roam_node # type: ignore
        return obj
    
    def __str__(self):
        return f"{self.__class__.__name__}.{self._name_}"

class MediaType(StrEnum):
    TEXT_PLAIN = 'text/plain'
    TEXT_MARKDOWN = 'text/markdown'
    IMAGE_JPEG = 'image/jpeg'

    def __str__(self):
        return f"{self.__class__.__name__}.{self._name_}"

class RoamVertex(ABC):
    """
    A struct representing a single Vertex that is output by PageDump.js

    ...

    Attributes
    ----------
    uid : Uid
        - if the Vertex corresponds 1-1 with a Roam Node (VertexType.is_roam_node == True), then uid is the Roam
          generated uid value 
        - if the Vertex is not 1-1 with a Roam Node, it was injected by PageDump.js, then uid is a GUID
        generated by PageDump.js

    vertex_type : VertexType
        this is abstract -- hardwired into subclasses
        
    media_type : MediaType
        https://en.wikipedia.org/wiki/Media_type
        https://www.iana.org/assignments/media-types/media-types.xhtml
    """

    def __init__(self: Any, uid: UID, media_type: MediaType): 
        if any(arg is None for arg in (uid, media_type)):
            raise ValueError("missing required arg")

        # PEP 8: "Use one leading underscore only for non-public methods and instance variables."
        self._uid = uid
        self._media_type = media_type

    @property
    def uid(self) -> UID:
        """is read-only"""
        return self._uid

    @property
    def media_type(self) -> MediaType:
        """is read-only"""
        return self._media_type
    
    @property
    @abstractmethod
    def vertex_type(self) -> VertexType:
        """is read-only"""
        pass

    def __repr__(self):
        clsname: str = type(self).__name__
        uid_string: str = self.uid[-8] if len(self.uid) > 8 else self.uid
        property_values: dict[str,Any] = get_property_values(self, True)
        logging.debug(f"property_values: {property_values}")
        # filter out the properties that are defined by this class
        property_values = {k:v for k,v in property_values.items() if k not in ['uid', 'vertex_type', 'media_type']}
        return f"{clsname}<{uid_string}>({self.vertex_type}, {self.media_type}, {property_values})"

class RoamNode(RoamVertex):

    def __init__(self: Any, uid: UID, media_type: MediaType, children: Optional[list[UID]] =[], 
                 references: Optional[list[UID]] =[]): 
        self._children= children
        self._references= references
        super().__init__(uid, media_type)

    @property
    def children(self) -> Optional[list[UID]]:
        """is read-only"""
        return self._children

    @property
    def references(self) -> Optional[list[UID]]:
        """is read-only"""
        return self._references

class PageNode(RoamNode):

    def __init__(self: Any, uid: UID, media_type: MediaType, title: str, children: Optional[list[UID]] =[], 
                 references: Optional[list[UID]] =[]): 
        if any(arg is None for arg in (title)):
            raise ValueError("missing required arg")

        self._title = title
        super().__init__(uid, media_type, children, references)

    @property
    def title(self) -> str:
        return self._title
    

    @property
    def vertex_type(self) -> VertexType:
        return VertexType.ROAM_PAGE

class BlockHeadingNode(RoamNode):

    def __init__(self: Any, uid: UID, media_type: MediaType, heading: str, children: Optional[list[UID]] =[], 
                 references: Optional[list[UID]] =[]): 
        if any(arg is None for arg in (heading)):
            raise ValueError("missing required arg")

        self._heading = heading
        super().__init__(uid, media_type, children, references)

    @property
    def heading(self) -> str:
        return self._heading
    

    @property
    def vertex_type(self) -> VertexType:
        return VertexType.ROAM_BLOCK_HEADING

class BlockContentNode(RoamNode):

    def __init__(self: Any, uid: UID, media_type: MediaType, content: str, children: Optional[list[UID]] =[], 
                 references: Optional[list[UID]] =[]): 
        self._content = content
        super().__init__(uid, media_type, children, references)

    @property
    def content(self) -> str:
        return self._content
    

    @property
    def vertex_type(self) -> VertexType:
        return VertexType.ROAM_BLOCK_CONTENT

class FileVertex(RoamVertex):

    def __init__(self: Any, uid: UID, media_type: MediaType, file_name: str, source: Url): 
        if any(arg is None for arg in (file_name, source)):
            raise ValueError("missing required arg")

        self._file_name = file_name
        self._source = source
        super().__init__(uid, media_type)

    @property
    def file_name(self) -> str:
        return self._file_name
    
    @property
    def source(self) -> Url:
        return self._source

    @property
    def vertex_type(self) -> VertexType:
        return VertexType.ROAM_FILE
